---
base_image_url: https://cloud-images.ubuntu.com/xenial/current/xenial-server-cloudimg-amd64-disk1.img
base_image_name: Ubuntu 16.04
hostname: singlevm
needs_nested_vm: true
vm:
{{with .GoPath}}
  mounts:
  - tag: hostgo
    security_model: none
    path: {{.}}
{{end}}
...
---
{{- define "ENV" -}}
{{proxyVars .}}
{{- print " DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true " -}}
{{end}}
{{ define "GOPATH" }}{{with .GoPath}}{{$.MountPath "hostgo"}}{{else}}/home/{{.User}}/go{{end}}{{end}}
#cloud-config
write_files:
{{- if len $.HTTPProxy }}
 - content: |
     [Service]
     Environment="HTTP_PROXY={{$.HTTPProxy}}"{{if len .HTTPSProxy}} "HTTPS_PROXY={{.HTTPSProxy}}{{end}}"{{if len .NoProxy}} "NO_PROXY={{.NoProxy}},{{.Hostname}}{{end}}"
   path: /etc/systemd/system/docker.service.d/http-proxy.conf
{{- end}}
{{with proxyEnv . 5}}
 - content: |
{{.}}
   path: /etc/environment
{{end}}
 - content: |
     [Service]
     ExecStart=
     ExecStart=/usr/bin/dockerd -D --add-runtime cor=/usr/bin/cc-runtime --default-runtime=cor
   path: /etc/systemd/system/docker.service.d/clr-containers.conf
 - content: |
     #!/bin/sh
     printf "\n"
     printf "\n"
     printf "Your go code is at {{template "GOPATH" .}}\n"
     printf "You can also edit your code on your host system \n"
     printf "To build cc-runtime from sources \n"
     printf "go get -d github.com/clearcontainers/runtime... \n"
     printf "cd {{template "GOPATH" .}}/src/github.com/clearcontainers/runtime \n"
     printf "make build-cc-system\n"
     printf "sudo -E PATH=$PATH make install-cc-system \n"
     printf "\n"
     printf "\n"
   path: /etc/update-motd.d/10-ciao-help-text
   permissions: '0755'
 - content: |
     [Unit]
      Description=OCI-based implementation of Kubernetes Container Runtime Interface
      Documentation=https://github.com/kubernetes-incubator/cri-o

      [Service]
      ExecStart=/usr/bin/crio --debug
      Environment="HTTP_PROXY={{$.HTTPProxy}}"{{if len .HTTPSProxy}} "HTTPS_PROXY={{.HTTPSProxy}}{{end}}"{{if len .NoProxy}} "NO_PROXY={{.NoProxy}},{{.Hostname}}{{end}}"
      Restart=on-failure
      RestartSec=5

      [Install]
      WantedBy=multi-user.target
   path: /etc/systemd/system/crio.service

apt:
{{- if len $.HTTPProxy }}
  proxy: "{{$.HTTPProxy}}"
{{- end}}
{{- if len $.HTTPSProxy }}
  https_proxy: "{{$.HTTPSProxy}}"
{{- end}}
package_upgrade: {{with .PackageUpgrade}}{{.}}{{else}}true{{end}}

runcmd:
 - {{beginTask . "Booting VM"}}
 - {{endTaskOk . }}

 - {{beginTask . (printf "Adding %s to /etc/hosts" .Hostname) }}
 - echo "127.0.0.1 {{.Hostname}}" >> /etc/hosts
 - {{endTaskCheck .}}

{{range .Mounts}}
 - mkdir -p {{.Path}}
 - sudo chown {{$.User}}:{{$.User}} {{.Tag}}
 - echo "{{.Tag}} {{.Path}} 9p x-systemd.automount,x-systemd.device-timeout=10,nofail,trans=virtio,version=9p2000.L 0 0" >> /etc/fstab
{{end}}
{{range .Mounts}}
 - {{beginTask $ (printf "Mounting %s" .Path) }}
 - mount {{.Path}}
 - {{endTaskCheck $}}
{{end}}

 - chown {{.User}}:{{.User}} /home/{{.User}}
 - rm /etc/update-motd.d/10-help-text /etc/update-motd.d/51-cloudguest
 - rm /etc/update-motd.d/90-updates-available
 - rm /etc/legal

 - {{beginTask . "Booting VM"}}
 - {{endTaskOk . }}

 - echo "GOPATH=\"{{template "GOPATH" .}}\"" >> /etc/environment
 - echo "PATH=\"$PATH:/usr/local/go/bin:{{template "GOPATH" .}}/bin\""  >> /etc/environment
 - export "GOPATH=\"{{template "GOPATH" .}}\""


 - {{beginTask . "Downloading Go" }}
 - {{download . "https://storage.googleapis.com/golang/go1.9.2.linux-amd64.tar.gz" "/tmp/go1.9.2.linux-amd64.tar.gz"}}
 - {{endTaskCheck .}}

 - {{beginTask . "Unpacking Go" }}
 - tar -C /usr/local -xzf /tmp/go1.9.2.linux-amd64.tar.gz
 - {{endTaskCheck .}}
 
 - rm /tmp/go1.9.2.linux-amd64.tar.gz

 - groupadd docker
 - sudo gpasswd -a {{.User}} docker

 - {{beginTask . "Update" }}
 - {{template "ENV" .}}sudo apt-get update
 - {{endTaskCheck .}}
 - {{beginTask . "Installing apt-transport-https and ca-certificates" }}
 - {{template "ENV" .}}sudo apt-get -y install  apt-transport-https ca-certificates curl software-properties-common
 - {{endTaskCheck .}}

 - {{beginTask . "Add docker GPG key" }}
 - {{template "ENV" .}}curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
 - {{template "ENV" .}}sudo apt-key fingerprint 0EBFCD88
 - {{endTaskCheck .}}

 - {{beginTask . "Adding docker repo"}}
 - {{template "ENV" .}}sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) test"
 - {{template "ENV" .}}sudo apt-get update
 - {{endTaskCheck .}}
   
 - {{beginTask . "Installing docker"}}
 - {{template "ENV" .}}sudo apt-get install -y docker-ce
 - {{endTaskCheck .}}

 - {{beginTask . "Add CRI-O OS dependency repo"}}
 - {{template "ENV" .}}sudo add-apt-repository "ppa:alexlarsson/flatpak"
 - {{endTaskCheck .}}

 - {{beginTask . "Retrieving updated list of packages"}}
 - {{template "ENV" .}}sudo apt-get update
 - {{endTaskCheck .}}

 - {{beginTask . "Installing Clear Containers Runtime"}}
 - {{template "ENV" .}}sudo apt-get install -y cc-runtime cc-proxy cc-shim
 - {{endTaskCheck .}}

 - {{beginTask . "Start Clear Containers Runtime"}}
 - sudo systemctl daemon-reload
 - sudo systemctl restart docker
 - sudo systemctl enable cc-proxy.socket
 - sudo systemctl start cc-proxy.socket
 - {{endTaskCheck .}}

 - {{beginTask . "Installing GCC"}}
 - {{template "ENV" .}}apt-get install gcc -y
 - {{endTaskCheck .}}

 - {{beginTask . "Installing Make"}}
 - {{template "ENV" .}}apt-get install make -y
 - {{endTaskCheck .}}

 - {{beginTask . "Installing QEMU" }}
 - {{template "ENV" .}}apt-get install qemu-system-x86 -y
 - {{endTaskCheck .}}

 - {{beginTask . "Installing xorriso"}}
 - {{template "ENV" .}}apt-get install xorriso -y
 - {{endTaskCheck .}}

 - {{beginTask . "Installing Clear Containers development tools"}}
 - {{template "ENV" .}}apt-get install build-essential python zlib1g-dev libcap-ng-dev libglib2.0-dev libpixman-1-dev libattr1-dev libcap-dev autoconf libtool libjson-glib-dev uuid-dev check bats libdevmapper-dev file apt-utils wget valgrind lcov libmnl-dev cppcheck libtap-formatter-html-perl -y
 - {{endTaskCheck .}}

 - {{beginTask . "Installing CRI-O dependencies"}}
 - {{template "ENV" .}}apt-get install -y socat libgpgme11 libostree-1-1
 - {{endTaskCheck .}}

 - {{beginTask . "Installing CRI-containerd  dependencies"}}
 - {{template "ENV" .}}apt-get install -y libseccomp-dev libapparmor-dev  btrfs-tools socat

 - {{endTaskCheck .}}

 - {{beginTask . "Auto removing unused development components"}}
 - {{template "ENV" .}}apt-get auto-remove -y
 - {{endTaskCheck .}}

 - {{beginTask . "Configuring CRIO for Clear Containers"}}
 - sudo sed -i 's/runtime_untrusted_workload = ""/runtime_untrusted_workload = "\/usr\/bin\/cc-runtime"/' "/etc/crio/crio.conf"
 - {{endTaskCheck .}}

 - {{beginTask . "Configuring K8S for CRIO"}}
 - sudo sed -i '/KUBELET_CADVISOR_ARGS/a Environment="KUBELET_EXTRA_ARGS=--container-runtime=remote --container-runtime-endpoint=/var/run/crio.sock --runtime-request-timeout=30m"' "/etc/systemd/system/kubelet.service.d/10-kubeadm.conf"
 - {{endTaskCheck .}}

 - {{beginTask . "Start CRI-O daemon"}}
 - sudo systemctl enable crio
 - sudo systemctl start crio
 - {{endTaskCheck .}}

 - {{beginTask . "Installing Go development utils"}}
 - sudo -u {{.User}} {{template "ENV" .}} GOPATH={{template "GOPATH" .}} /usr/local/go/bin/go get github.com/mattn/goveralls golang.org/x/tools/cmd/cover github.com/pierrre/gotestcover github.com/fzipp/gocyclo github.com/gordonklaus/ineffassign github.com/golang/lint/golint github.com/client9/misspell/cmd/misspell github.com/ciao-project/ciao/test-cases github.com/opencontainers/runc/libcontainer/configs
 - {{endTaskCheck .}}

 - chown {{.User}}:{{.User}} -R {{template "GOPATH" .}}

{{if len .GitUserName}}
 - {{beginTask . "Setting git user.name"}}
 - sudo -u {{.User}} git config --global user.name "{{.GitUserName}}"
 - {{endTaskCheck .}}
{{end}}

{{if len .GitEmail}}
 - {{beginTask . "Setting git user.email"}}
 - sudo -u {{.User}} git config --global user.email {{.GitEmail}}
 - {{endTaskCheck .}}
{{end}}

 - {{finished .}}

users:
  - name: {{.User}}
    gecos: CC Demo User
    lock-passwd: true
    shell: /bin/bash
    sudo: ALL=(ALL) NOPASSWD:ALL
    ssh-authorized-keys:
    - {{.PublicKey}}
...
